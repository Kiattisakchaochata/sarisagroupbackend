// src/controllers/auth.controller.js
import bcrypt from 'bcryptjs'
import jwt from 'jsonwebtoken'
import prisma from '../config/prisma.config.js'
import { createError } from '../utils/create-error.util.js'

const AUTH_COOKIE = process.env.AUTH_COOKIE_NAME || 'token'
const JWT_SECRET  = process.env.JWT_SECRET || 'TopAwards'
const IS_PROD     = process.env.NODE_ENV === 'production'

// helper ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT
function signToken(payload) {
  return jwt.sign(payload, JWT_SECRET, { expiresIn: '7d' })
}

// üî∏ helper: ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏≠‡πà‡∏≤‡∏ô user ‡∏à‡∏≤‡∏Å cookie/Authorization (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô null)
async function tryResolveUser(req) {
  try {
    const bearer = (req.headers.authorization || '').trim()
    const headerToken = bearer.startsWith('Bearer ') ? bearer.slice(7) : null
    const cookieToken = req.cookies?.[AUTH_COOKIE] || null
    const token = headerToken || cookieToken
    if (!token) return null

    const decoded = jwt.verify(token, JWT_SECRET)
    if (!decoded?.id) return null

    const user = await prisma.user.findUnique({
      where: { id: decoded.id },
      select: { id: true, name: true, email: true, role: true }
    })
    return user || null
  } catch (_e) {
    // token ‡∏ú‡∏¥‡∏î/‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‚Üí ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
    return null
  }
}

// POST /api/auth/register
export const register = async (req, res, next) => {
  try {
    const { name, email, password } = req.body

    const existing = await prisma.user.findUnique({ where: { email } })
    if (existing) return next(createError(400, '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß'))

    const hashed = await bcrypt.hash(password, 10)
    const created = await prisma.user.create({
      data: { name, email, password_hash: hashed, role: 'user' },
      select: { id: true, name: true, email: true, role: true }
    })

    // ‚úÖ ‡∏≠‡∏≠‡∏õ‡∏ä‡∏±‡∏ô: ‡∏≠‡∏≠‡∏Å token ‡πÉ‡∏´‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏™‡∏°‡∏±‡∏Ñ‡∏£ (‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
    const token = signToken({ id: created.id, role: created.role })
    res.cookie(AUTH_COOKIE, token, {
      httpOnly: true,
      secure: IS_PROD,
      sameSite: IS_PROD ? 'none' : 'lax',
      path: '/',
      maxAge: 7 * 24 * 60 * 60 * 1000
    })

    return res.status(201).json({
      message: '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      token, // üëà ‡∏™‡πà‡∏á token ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢
      user: created
    })
  } catch (err) {
    next(err)
  }
}

// POST /api/auth/login
export const login = async (req, res, next) => {
  try {
    const { email, password } = req.body

    const user = await prisma.user.findUnique({
      where: { email },
      select: { id: true, name: true, email: true, password_hash: true, role: true }
    })
    if (!user) return next(createError(400, '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'))

    const isMatch = await bcrypt.compare(password, user.password_hash)
    if (!isMatch) return next(createError(400, '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'))

    const token = signToken({ id: user.id, role: user.role })

    // ‚úÖ ‡πÄ‡∏ã‡πá‡∏ï cookie (‡πÄ‡∏ß‡πá‡∏ö‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ)
    res.cookie(AUTH_COOKIE, token, {
      httpOnly: true,
      secure: IS_PROD,
      sameSite: IS_PROD ? 'none' : 'lax',
      path: '/',
      maxAge: 7 * 24 * 60 * 60 * 1000
    })

    // ‚úÖ ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á token ‡πÉ‡∏ô body (Postman/‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡πÉ‡∏ä‡πâ Bearer ‡πÑ‡∏î‡πâ)
    return res.json({
      message: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      token, // üëà ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
      user: { id: user.id, name: user.name, email: user.email, role: user.role }
    })
  } catch (err) {
    next(err)
  }
}

// GET /api/auth/me
// ‚ùó ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏´‡πâ "‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô": ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö user ‚Üí ‡∏ï‡∏≠‡∏ö 200 ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡πà‡∏≤ null
export const getMe = async (req, res, next) => {
  try {
    // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å middleware ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ; ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏≠‡∏á‡∏ñ‡∏≠‡∏î token ‡πÄ‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≤ ‡πÜ
    const userFromMiddleware = req.user ?? null
    const user = userFromMiddleware || (await tryResolveUser(req))
    return res.status(200).json(user || null)
  } catch (err) {
    // ‡πÅ‡∏°‡πâ‡πÄ‡∏Å‡∏¥‡∏î error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏î token ‡∏Å‡πá‡∏≠‡∏¢‡πà‡∏≤‡∏ï‡∏≠‡∏ö 401 ‚Äî ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô"
    return res.status(200).json(null)
  }
}

// POST /api/auth/logout
export const logout = async (_req, res, _next) => {
  res.clearCookie(AUTH_COOKIE, {
    path: '/',
    secure: IS_PROD,
    sameSite: IS_PROD ? 'none' : 'lax'
  })
  return res.json({ message: '‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß' })
}

/* ========================== CHANGE PASSWORD ========================== */
export const changePassword = async (req, res, next) => {
  try {
    const raw = req.body || {}

    const old_password =
      raw.old_password ?? raw.current_password ?? raw.oldPassword ??
      raw.currentPassword ?? raw.password_old ?? raw.passwordCurrent ?? raw.current ?? null

    const new_password =
      raw.new_password ?? raw.password ?? raw.newPassword ??
      raw.password_new ?? raw.passwordNew ?? raw.next ?? null

    if (!old_password || !new_password) {
      return next(createError(400, '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà'))
    }

    if (String(new_password).length < 8) {
      return next(createError(400, '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 8 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£'))
    }

    if (String(new_password) === String(old_password)) {
      return next(createError(400, '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°'))
    }

    const userId = req.user?.id
    if (!userId) return next(createError(401, '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö'))

    const user = await prisma.user.findUnique({
      where: { id: userId },
      select: { id: true, password_hash: true }
    })
    if (!user) return next(createError(404, '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'))

    const isMatch = await bcrypt.compare(String(old_password), String(user.password_hash))
    if (!isMatch) return next(createError(400, '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'))

    const hashed = await bcrypt.hash(String(new_password), 10)
    await prisma.user.update({
      where: { id: userId },
      data: { password_hash: hashed }
    })

    return res.json({ message: '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' })
  } catch (err) {
    next(err)
  }
}