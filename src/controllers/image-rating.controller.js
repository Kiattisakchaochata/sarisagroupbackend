// src/controllers/image-rating.controller.js
import prisma from '../config/prisma.config.js';
import { createError } from '../utils/create-error.util.js';

/** ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ image ‡∏ô‡∏µ‡πâ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß/‡πÉ‡∏´‡πâ‡∏î‡∏≤‡∏ß */
async function assertImageAllowsReview(imageId) {
  const img = await prisma.image.findUnique({
    where: { id: imageId },
    select: { id: true, store_id: true, allow_review: true },
  });
  if (!img) throw createError(404, '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏ô‡∏µ‡πâ');
  if (!img.allow_review) throw createError(403, '‡πÄ‡∏°‡∏ô‡∏π/‡∏£‡∏π‡∏õ‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß');
  return img;
}

/** ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ avg + count ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á image ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡∏ö‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á images ‡∏î‡πâ‡∏ß‡∏¢ (denormalize) */
async function recomputeAndUpdateImageStats(imageId) {
  const agg = await prisma.imageRating.aggregate({
    where: { image_id: imageId },
    _avg: { rating: true },
    _count: { rating: true },
  });

  const count = Number(agg?._count?.rating ?? 0);
  const avgRaw = Number(agg?._avg?.rating ?? 0);
  const avg = count > 0 ? Number(avgRaw.toFixed(2)) : 0;

  // ‚úÖ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
  await prisma.image.update({
    where: { id: imageId },
    data: {
      rating: avg,        // ‚Üê ‡πÉ‡∏ä‡πâ rating (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà avg_rating)
      rating_count: count,
    },
  });

  return { avg, count };
}

/** üü¢ GET /api/ratings/:imageId ‚Äî ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏ô‡∏µ‡πâ (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô) */
export async function getImageRatingsForImage(req, res, next) {
  try {
    const imageId = req.params.imageId;
    const img = await prisma.image.findUnique({ where: { id: imageId }, select: { id: true } });
    if (!img) return next(createError(404, '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏ô‡∏µ‡πâ'));

    const agg = await prisma.imageRating.aggregate({
      where: { image_id: imageId },
      _avg: { rating: true },
      _count: { rating: true },
    });

    const count = Number(agg?._count?.rating ?? 0);
    const avgRaw = Number(agg?._avg?.rating ?? 0);
    const avg = count > 0 ? Number(avgRaw.toFixed(2)) : 0;

    res.json({ image_id: imageId, avg, count });
  } catch (err) {
    next(err);
  }
}

/** üü¢ GET /api/ratings/:imageId/me ‚Äî ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ (‡∏ï‡πâ‡∏≠‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô) */
export async function getMyImageRating(req, res, next) {
  try {
    const imageId = req.params.imageId;
    const userId = req.user?.id;
    if (!userId) return next(createError(401, '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö'));

    const rating = await prisma.imageRating.findUnique({
      where: {
        image_id_user_id: { image_id: imageId, user_id: userId },
      },
      select: { id: true, rating: true, created_at: true, updated_at: true },
    });

    res.json({ image_id: imageId, my_rating: rating?.rating ?? null });
  } catch (err) {
    next(err);
  }
}

/** üîê POST /api/ratings/:imageId ‡∏´‡∏£‡∏∑‡∏≠ POST /api/ratings (body.image_id) ‚Äî ‡πÉ‡∏´‡πâ‡∏î‡∏≤‡∏ß/‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏î‡∏≤‡∏ß */
export async function createOrUpdateImageRating(req, res, next) {
  try {
    const paramId = req.params?.imageId;
    const bodyId = req.body?.image_id;
    const imageId = String(paramId || bodyId || '');

    const rating = Number(req.body?.rating);
    const userId = req.user?.id;

    if (!userId) return next(createError(401, '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö'));
    if (!imageId) return next(createError(400, '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ image_id'));
    if (!Number.isFinite(rating) || rating < 1 || rating > 5) {
      return next(createError(400, '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏° 1‚Äì5'));
    }

    await assertImageAllowsReview(imageId);

    // upsert (‡∏´‡∏ô‡∏∂‡πà‡∏á user ‡πÉ‡∏´‡πâ 1 ‡∏£‡∏π‡∏õ‡πÑ‡∏î‡πâ 1 record)
    const saved = await prisma.imageRating.upsert({
      where: { image_id_user_id: { image_id: imageId, user_id: userId } },
      update: { rating },
      create: { image_id: imageId, user_id: userId, rating },
      select: { id: true, rating: true },
    });

    const stats = await recomputeAndUpdateImageStats(imageId);

    res.status(201).json({
      message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢',
      image_id: imageId,
      my_rating: saved.rating,
      ...stats, // { avg, count }
    });
  } catch (err) {
    next(err);
  }
}

/** üîê DELETE /api/ratings/:imageId ‚Äî ‡∏•‡∏ö‡∏î‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏≠‡∏≠‡∏Å */
export async function deleteImageRating(req, res, next) {
  try {
    const imageId = req.params?.imageId;
    const userId = req.user?.id;

    if (!userId) return next(createError(401, '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö'));
    if (!imageId) return next(createError(400, '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ imageId'));

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ record ‡∏Å‡πá‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (idempotent)
    await prisma.imageRating.deleteMany({
      where: { image_id: imageId, user_id: userId },
    });

    const stats = await recomputeAndUpdateImageStats(imageId);

    res.json({
      message: '‡∏•‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢',
      image_id: imageId,
      my_rating: null,
      ...stats,
    });
  } catch (err) {
    next(err);
  }
}